name: üè∑Ô∏è Auto Release

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'package.json'
      - 'backend/package.json'
      - 'webapp/package.json'

jobs:
  check-version:
    name: üîç Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: üîç Check if version changed
      id: check
      run: |
        OLD_VERSION=$(git show HEAD~1:package.json | jq -r '.version')
        NEW_VERSION=$(jq -r '.version' package.json)
        
        if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Version changed from $OLD_VERSION to $NEW_VERSION"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "Version not changed: $NEW_VERSION"
        fi

  create-release:
    name: üöÄ Create Release
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: üì¶ Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: '8'

    - name: üì• Install dependencies
      run: pnpm install --frozen-lockfile

    - name: üèóÔ∏è Build projects
      run: |
        pnpm b build
        pnpm w build

    - name: üìù Generate changelog
      id: changelog
      run: |
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è changelog –∏–∑ –∫–æ–º–º–∏—Ç–æ–≤
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s" --no-merges)
        else
          COMMITS=$(git log --pretty=format:"- %s" --no-merges $LAST_TAG..HEAD)
        fi
        
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "## –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –≤–µ—Ä—Å–∏–∏ v${{ needs.check-version.outputs.new-version }}" >> $GITHUB_ENV
        echo "" >> $GITHUB_ENV
        echo "$COMMITS" >> $GITHUB_ENV
        echo "" >> $GITHUB_ENV
        echo "### üê≥ Docker –æ–±—Ä–∞–∑—ã" >> $GITHUB_ENV
        echo "- \`docker pull your-registry/monastyr-backend:v${{ needs.check-version.outputs.new-version }}\`" >> $GITHUB_ENV
        echo "- \`docker pull your-registry/monastyr-frontend:v${{ needs.check-version.outputs.new-version }}\`" >> $GITHUB_ENV
        echo "" >> $GITHUB_ENV
        echo "### üì¶ –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞" >> $GITHUB_ENV
        echo "\`\`\`bash" >> $GITHUB_ENV
        echo "wget https://github.com/\${{ github.repository }}/releases/download/v${{ needs.check-version.outputs.new-version }}/monastyr-v${{ needs.check-version.outputs.new-version }}.tar.gz" >> $GITHUB_ENV
        echo "tar -xzf monastyr-v${{ needs.check-version.outputs.new-version }}.tar.gz" >> $GITHUB_ENV
        echo "./deploy.sh" >> $GITHUB_ENV
        echo "\`\`\`" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: üì¶ Create release archive
      run: |
        mkdir -p release
        cp -r backend/dist release/backend
        cp -r webapp/dist release/frontend
        cp docker-compose.yml release/
        cp docker-compose.dev.yml release/
        cp .env.production release/.env.example
        cp deploy.sh release/
        cp quick-start.sh release/
        cp Makefile release/
        cp -r scripts release/
        cp -r nginx release/
        cp -r mysql release/
        cp README.md LICENSE DOCKER_PRODUCTION_GUIDE.md release/
        tar -czf monastyr-v${{ needs.check-version.outputs.new-version }}.tar.gz -C release .

    - name: üè∑Ô∏è Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.check-version.outputs.new-version }}
        release_name: üèõÔ∏è Monastyr v${{ needs.check-version.outputs.new-version }}
        body: ${{ env.CHANGELOG }}
        draft: false
        prerelease: false

    - name: üì§ Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./monastyr-v${{ needs.check-version.outputs.new-version }}.tar.gz
        asset_name: monastyr-v${{ needs.check-version.outputs.new-version }}.tar.gz
        asset_content_type: application/gzip
