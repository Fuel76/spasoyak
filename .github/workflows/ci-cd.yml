name: 🏛️ Monastyr CI/CD Pipeline

on:
  push:
    branches: [ main, master, production ]
  pull_request:
    branches: [ main, master, production ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Тестирование и линтинг
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: monastyr_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📦 Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: 🎯 Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: 🗂️ Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: 📥 Install dependencies
      run: pnpm install --frozen-lockfile

    - name: 🔍 Lint backend
      run: pnpm b lint

    - name: 🔍 Lint frontend
      run: pnpm w lint

    - name: 📝 Type check backend
      run: pnpm b types

    - name: 📝 Type check frontend
      run: pnpm w types

    - name: 🗄️ Setup test database
      env:
        DATABASE_URL: mysql://test_user:test_password@localhost:3306/monastyr_test
      run: |
        cd backend
        pnpm prisma migrate deploy

    - name: 🧪 Run backend tests
      env:
        DATABASE_URL: mysql://test_user:test_password@localhost:3306/monastyr_test
        JWT_SECRET: test_secret_key
        ADMIN_REGISTRATION_KEY: test_admin_key
      run: |
        cd backend
        # Здесь будут тесты, когда они будут добавлены
        echo "Tests will be added here"

  # Сборка Docker образов
  build:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: monastyr-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./webapp
        file: ./webapp/Dockerfile
        push: false
        tags: monastyr-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Проверка безопасности
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📦 Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: 📥 Install dependencies
      run: pnpm install --frozen-lockfile

    - name: 🔍 Run security audit
      run: pnpm audit --audit-level moderate

    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Развертывание (только для main/master ветки)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/monastyr-backend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/monastyr-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./webapp
        file: ./webapp/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/monastyr-frontend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/monastyr-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Здесь можно добавить развертывание на сервер
    # - name: 🚀 Deploy to server
    #   uses: appleboy/ssh-action@v1.0.0
    #   with:
    #     host: ${{ secrets.HOST }}
    #     username: ${{ secrets.USERNAME }}
    #     key: ${{ secrets.KEY }}
    #     script: |
    #       cd /opt/monastyr
    #       docker-compose pull
    #       docker-compose up -d

  # Создание релиза
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.event_name == 'release'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📦 Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: 📥 Install dependencies
      run: pnpm install --frozen-lockfile

    - name: 🏗️ Build projects
      run: |
        pnpm b build
        pnpm w build

    - name: 📦 Create release archive
      run: |
        mkdir -p release
        cp -r backend/dist release/backend
        cp -r webapp/dist release/frontend
        cp docker-compose.yml release/
        cp .env.production release/.env.example
        cp README.md LICENSE release/
        tar -czf monastyr-${{ github.event.release.tag_name }}.tar.gz -C release .

    - name: 📤 Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./monastyr-${{ github.event.release.tag_name }}.tar.gz
        asset_name: monastyr-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip
