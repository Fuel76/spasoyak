#!/usr/bin/env node

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ PostImages
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ endpoints –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 */

const fs = require('fs');
const path = require('path');
const FormData = require('form-data');

const BASE_URL = 'http://localhost:3000';

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(colors[color] + message + colors.reset);
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å
 */
async function makeRequest(url, options = {}) {
  const response = await fetch(url, options);
  const text = await response.text();
  
  try {
    return {
      ok: response.ok,
      status: response.status,
      data: JSON.parse(text)
    };
  } catch {
    return {
      ok: response.ok,
      status: response.status,
      data: text
    };
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
function createTestImage() {
  const testImagePath = '/tmp/test-postimages-integration.png';
  
  // –ï—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (fs.existsSync(testImagePath)) {
    return testImagePath;
  }
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const { execSync } = require('child_process');
  try {
    execSync(`magick -size 200x100 xc:lightgreen -pointsize 20 -fill black -gravity center -annotate +0+0 "Integration Test" "${testImagePath}"`);
    return testImagePath;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}`, 'red');
    return null;
  }
}

/**
 * –¢–µ—Å—Ç 1: –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ PostImages
 */
async function testDirectPostImagesUpload(imagePath) {
  log('\n=== –¢–µ—Å—Ç 1: –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ PostImages ===', 'blue');
  
  try {
    const formData = new FormData();
    formData.append('file', fs.createReadStream(imagePath));
    
    const response = await fetch(`${BASE_URL}/api/media/upload-postimages`, {
      method: 'POST',
      body: formData,
      headers: formData.getHeaders()
    });
    
    const result = await response.json();
    
    if (response.ok) {
      log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.message}`, 'green');
      log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${result.file?.source || 'unknown'}`, 'yellow');
      log(`   URL: ${result.file?.url || 'no url'}`, 'yellow');
      return { success: true, result };
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞: ${result.error || response.statusText}`, 'red');
      return { success: false, result };
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'red');
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç 2: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å PostImages
 */
async function testUniversalUploadWithPostImages(imagePath) {
  log('\n=== –¢–µ—Å—Ç 2: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å PostImages ===', 'blue');
  
  try {
    const formData = new FormData();
    formData.append('file', fs.createReadStream(imagePath));
    formData.append('usePostImages', 'true');
    
    const response = await fetch(`${BASE_URL}/api/media/upload`, {
      method: 'POST',
      body: formData,
      headers: formData.getHeaders()
    });
    
    const result = await response.json();
    
    if (response.ok) {
      log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.message}`, 'green');
      log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${result.file?.source || 'unknown'}`, 'yellow');
      log(`   URL: ${result.file?.url || 'no url'}`, 'yellow');
      return { success: true, result };
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞: ${result.error || response.statusText}`, 'red');
      return { success: false, result };
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'red');
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è SunEditor —Å PostImages
 */
async function testSunEditorUploadWithPostImages(imagePath) {
  log('\n=== –¢–µ—Å—Ç 3: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è SunEditor —Å PostImages ===', 'blue');
  
  try {
    const formData = new FormData();
    formData.append('file', fs.createReadStream(imagePath));
    formData.append('usePostImages', 'true');
    
    const response = await fetch(`${BASE_URL}/api/upload/upload-image-from-editor`, {
      method: 'POST',
      body: formData,
      headers: formData.getHeaders()
    });
    
    const result = await response.json();
    
    if (response.ok) {
      log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.message}`, 'green');
      log(`   Status: ${result.status}`, 'yellow');
      log(`   URL: ${result.data?.url || 'no url'}`, 'yellow');
      log(`   Name: ${result.data?.name || 'no name'}`, 'yellow');
      return { success: true, result };
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞: ${result.error || response.statusText}`, 'red');
      return { success: false, result };
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'red');
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç 4: –õ–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (fallback)
 */
async function testLocalUploadFallback(imagePath) {
  log('\n=== –¢–µ—Å—Ç 4: –õ–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (fallback) ===', 'blue');
  
  try {
    const formData = new FormData();
    formData.append('file', fs.createReadStream(imagePath));
    formData.append('usePostImages', 'false');
    
    const response = await fetch(`${BASE_URL}/api/media/upload`, {
      method: 'POST',
      body: formData,
      headers: formData.getHeaders()
    });
    
    const result = await response.json();
    
    if (response.ok) {
      log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.message}`, 'green');
      log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${result.file?.source || 'unknown'}`, 'yellow');
      log(`   URL: ${result.file?.url || 'no url'}`, 'yellow');
      return { success: true, result };
    } else {
      log(`‚ùå –û—à–∏–±–∫–∞: ${result.error || response.statusText}`, 'red');
      return { success: false, result };
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`, 'red');
    return { success: false, error: error.message };
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
  log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ PostImages', 'blue');
  log('=' .repeat(60), 'blue');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const imagePath = createTestImage();
  if (!imagePath) {
    log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'red');
    return;
  }
  
  log(`üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imagePath}`, 'yellow');
  
  const results = {
    directPostImages: await testDirectPostImagesUpload(imagePath),
    universalWithPostImages: await testUniversalUploadWithPostImages(imagePath),
    sunEditorWithPostImages: await testSunEditorUploadWithPostImages(imagePath),
    localFallback: await testLocalUploadFallback(imagePath)
  };
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log('\n' + '=' .repeat(60), 'blue');
  log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢', 'blue');
  log('=' .repeat(60), 'blue');
  
  const testNames = {
    directPostImages: '–ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ PostImages',
    universalWithPostImages: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å PostImages',
    sunEditorWithPostImages: 'SunEditor —Å PostImages',
    localFallback: '–õ–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (fallback)'
  };
  
  let successCount = 0;
  let totalCount = 0;
  
  for (const [key, result] of Object.entries(results)) {
    totalCount++;
    const status = result.success ? '‚úÖ' : '‚ùå';
    const color = result.success ? 'green' : 'red';
    log(`${status} ${testNames[key]}`, color);
    
    if (result.success) {
      successCount++;
    }
  }
  
  log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalCount} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`, 
       successCount === totalCount ? 'green' : 'yellow');
  
  if (successCount === totalCount) {
    log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è PostImages —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.', 'green');
  } else {
    log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.', 'yellow');
  }
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
  log('\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï:', 'blue');
  log('‚Ä¢ PostImages fallback: —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green');
  log('‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green');
  log('‚Ä¢ API endpoints: —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã', 'green');
  log('‚Ä¢ SunEditor –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é', 'green');
  
  // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
  try {
    fs.unlinkSync(imagePath);
    log(`\nüßπ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: ${imagePath}`, 'yellow');
  } catch (error) {
    log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${error.message}`, 'yellow');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
if (require.main === module) {
  runTests().catch(error => {
    log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = {
  runTests,
  testDirectPostImagesUpload,
  testUniversalUploadWithPostImages,
  testSunEditorUploadWithPostImages,
  testLocalUploadFallback
};
