services:
  # База данных MySQL
  database:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: monastyr_db
      MYSQL_USER: monastyr_user
      MYSQL_PASSWORD: monastyr_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - monastyr_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      timeout: 20s
      retries: 10

  # Backend сервис
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.simple
    dns:
      - 8.8.8.8
      - 8.8.4.4
    environment:
      DATABASE_URL: mysql://monastyr_user:monastyr_password@database:3306/monastyr_db
      JWT_SECRET: your_jwt_secret_key_here
      NODE_ENV: production
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - monastyr_network
    volumes:
      - ./backend/uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      timeout: 10s
      retries: 3

  # Frontend сервис
  frontend:
    build:
      context: .
      dockerfile: webapp/Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - monastyr_network
    restart: unless-stopped

  # Nginx прокси (опционально)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - monastyr_network
    restart: unless-stopped

volumes:
  mysql_data:

networks:
  monastyr_network:
    driver: bridge
