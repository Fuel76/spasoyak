version: '3.8'

# Docker Compose конфигурация для Amvera
# Volumes не поддерживаются, используется эфемерное хранилище

services:
  # База данных MySQL
  db:
    image: mysql:8.0
    container_name: spasoyak_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - spasoyak-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.amvera
    container_name: spasoyak_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      ADMIN_REGISTRATION_KEY: ${ADMIN_REGISTRATION_KEY}
      FRONTEND_URL: ${FRONTEND_URL}
      PORT: 3000
      UPLOAD_DIR: /tmp/uploads
      MAX_FILE_SIZE: ${MAX_FILE_SIZE}
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - spasoyak-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Nginx + React build)
  frontend:
    build:
      context: ./webapp
      dockerfile: Dockerfile.amvera
      args:
        VITE_API_URL: ${VITE_API_URL}
    container_name: spasoyak_frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - spasoyak-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis для кеширования
  redis:
    image: redis:7-alpine
    container_name: spasoyak_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    networks:
      - spasoyak-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  spasoyak-network:
    driver: bridge
