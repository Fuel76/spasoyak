import React, { useState, useEffect } from 'react';
import { TrebaTypesApiV2 } from '../../services/treba-api-v2';
import { TrebaTypeV2 } from '../../types/treba-v2';
import './AdminTrebyTypesPage.css';
import '../../styles/system-pages.css';

const AdminTrebyTypesPage: React.FC = () => {
  const [trebaTypes, setTrebaTypes] = useState<TrebaTypeV2[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingType, setEditingType] = useState<TrebaTypeV2 | null>(null);

  const [formData, setFormData] = useState({
    name: '',
    description: '',
    basePrice: 0,
    currency: 'RUB',
    period: '–†–∞–∑–æ–≤–æ–µ',
    isActive: true,
  });

  useEffect(() => {
    loadTrebaTypes();
  }, []);

  const loadTrebaTypes = async () => {
    try {
      setIsLoading(true);
      setError(null);
      setSuccess(null);
      const response = await TrebaTypesApiV2.getAll();
      setTrebaTypes(response.data || []);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–ø–æ–≤ —Ç—Ä–µ–±');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      if (editingType) {
        await TrebaTypesApiV2.update(editingType.id, formData);
      } else {
        await TrebaTypesApiV2.create(formData);
      }

      await loadTrebaTypes();
      resetForm();
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ —Ç—Ä–µ–±—ã');
      console.error(err);
    }
  };

  const handleEdit = (trebaType: TrebaTypeV2) => {
    setEditingType(trebaType);
    setFormData({
      name: trebaType.name,
      description: trebaType.description || '',
      basePrice: trebaType.basePrice,
      currency: trebaType.currency,
      period: trebaType.period,
      isActive: trebaType.isActive,
    });
    setShowAddForm(true);
  };

  const handleToggleActive = async (id: number) => {
    try {
      await TrebaTypesApiV2.toggleActive(id);
      await loadTrebaTypes();
    } catch (err: any) {
      setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–±—ã');
      console.error(err);
    }
  };

  const handleDelete = async (id: number, typeName: string, isActive: boolean) => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
    const confirmMessage = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–∏–ø —Ç—Ä–µ–±—ã "${typeName}"?\n\n` +
      `‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∏, —É–¥–∞–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n` +
      `–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è.\n\n` +
      `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ?`;
    
    if (!confirm(confirmMessage)) {
      return;
    }

    try {
      await TrebaTypesApiV2.delete(id);
      await loadTrebaTypes();
      setSuccess('–¢–∏–ø —Ç—Ä–µ–±—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
    } catch (err: any) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
      if (err.message.includes('—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–µ–±—ã')) {
        const shouldDeactivate = confirm(
          `‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –¥–ª—è —Ç–∏–ø–∞ "${typeName}" —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∏.\n\n` +
          `üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è.\n` +
          `–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ñ–æ—Ä–º–µ –ø–æ–¥–∞—á–∏ —Ç—Ä–µ–±,\n` +
          `–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞—è–≤–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n` +
          `–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø —Ç—Ä–µ–±—ã "${typeName}"?`
        );
        
        if (shouldDeactivate && isActive) {
          try {
            await TrebaTypesApiV2.toggleActive(id);
            await loadTrebaTypes();
            setSuccess(`–¢–∏–ø —Ç—Ä–µ–±—ã "${typeName}" —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
          } catch (toggleErr: any) {
            setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${toggleErr.message}`);
          }
        } else if (shouldDeactivate && !isActive) {
          setError(`–¢–∏–ø —Ç—Ä–µ–±—ã "${typeName}" —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
        } else {
          setError('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        }
      } else {
        setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ —Ç—Ä–µ–±—ã');
      }
      console.error(err);
    }
  };

  const resetForm = () => {
    setFormData({
      name: '',
      description: '',
      basePrice: 0,
      currency: 'RUB',
      period: '–†–∞–∑–æ–≤–æ–µ',
      isActive: true,
    });
    setEditingType(null);
    setShowAddForm(false);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('ru-RU');
  };

  if (isLoading) {
    return (
      <div className="admin-page">
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∏–ø–æ–≤ —Ç—Ä–µ–±...</div>
      </div>
    );
  }

  return (
    <div className="admin-page">
      <div className="admin-header">
        <h1>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞–º–∏ —Ç—Ä–µ–±</h1>
        <p>–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∏–ø–æ–≤ —Ü–µ—Ä–∫–æ–≤–Ω—ã—Ö —Ç—Ä–µ–±</p>
        <button 
          className="btn-primary"
          onClick={() => setShowAddForm(true)}
        >
          –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø —Ç—Ä–µ–±—ã
        </button>
      </div>

      {error && (
        <div className="error-message">
          {error}
          <button onClick={() => setError(null)}>√ó</button>
        </div>
      )}

      {showAddForm && (
        <div className="modal-overlay">
          <div className="modal">
            <div className="modal-header">
              <h2>{editingType ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–ø —Ç—Ä–µ–±—ã' : '–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø —Ç—Ä–µ–±—ã'}</h2>
              <button onClick={resetForm} className="modal-close">√ó</button>
            </div>
            
            <form onSubmit={handleSubmit} className="treba-type-form">
              <div className="form-group">
                <label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–±—ã *</label>
                <input
                  type="text"
                  id="name"
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  required
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–ª–µ–±–µ–Ω –æ –∑–¥—Ä–∞–≤–∏–∏"
                />
              </div>

              <div className="form-group">
                <label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  id="description"
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                  placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–±—ã"
                  rows={3}
                />
              </div>

              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="basePrice">–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å *</label>
                  <input
                    type="number"
                    id="basePrice"
                    value={formData.basePrice}
                    onChange={(e) => setFormData({ ...formData, basePrice: Number(e.target.value) })}
                    required
                    min="0"
                    step="0.01"
                  />
                </div>

                <div className="form-group">
                  <label htmlFor="currency">–í–∞–ª—é—Ç–∞</label>
                  <select
                    id="currency"
                    value={formData.currency}
                    onChange={(e) => setFormData({ ...formData, currency: e.target.value })}
                  >
                    <option value="RUB">RUB</option>
                    <option value="USD">USD</option>
                    <option value="EUR">EUR</option>
                  </select>
                </div>
              </div>

              <div className="form-group">
                <label htmlFor="period">–ü–µ—Ä–∏–æ–¥</label>
                <select
                  id="period"
                  value={formData.period}
                  onChange={(e) => setFormData({ ...formData, period: e.target.value })}
                >
                  <option value="–†–∞–∑–æ–≤–æ–µ">–†–∞–∑–æ–≤–æ–µ</option>
                  <option value="–ï–∂–µ–¥–Ω–µ–≤–Ω–æ">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</option>
                  <option value="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</option>
                  <option value="–ï–∂–µ–º–µ—Å—è—á–Ω–æ">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</option>
                  <option value="40 –¥–Ω–µ–π">40 –¥–Ω–µ–π</option>
                  <option value="–ü–æ–ª–≥–æ–¥–∞">–ü–æ–ª–≥–æ–¥–∞</option>
                  <option value="–ì–æ–¥">–ì–æ–¥</option>
                </select>
              </div>

              <div className="form-group">
                <label className="checkbox-label">
                  <input
                    type="checkbox"
                    checked={formData.isActive}
                    onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}
                  />
                  –ê–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–±–∞ (–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞)
                </label>
              </div>

              <div className="form-actions">
                <button type="submit" className="btn-primary">
                  {editingType ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å —Ç–∏–ø —Ç—Ä–µ–±—ã'}
                </button>
                <button type="button" onClick={resetForm} className="btn-secondary">
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      <div className="treba-types-list">
        {trebaTypes.length === 0 ? (
          <div className="empty-state">
            <p>–¢–∏–ø—ã —Ç—Ä–µ–± –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–∏–ø —Ç—Ä–µ–±—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
          </div>
        ) : (
          <div className="treba-types-grid">
            {trebaTypes.map((trebaType) => (
              <div key={trebaType.id} className={`treba-type-card ${!trebaType.isActive ? 'inactive' : ''}`}>
                <div className="card-header">
                  <h3>{trebaType.name}</h3>
                  <div className="card-status">
                    {trebaType.isActive ? (
                      <span className="status-active">–ê–∫—Ç–∏–≤–Ω–∞</span>
                    ) : (
                      <span className="status-inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω–∞</span>
                    )}
                  </div>
                </div>
                
                <div className="card-content">
                  <p className="description">{trebaType.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
                  
                  <div className="price-info">
                    <span className="price">{trebaType.basePrice} {trebaType.currency}</span>
                    <span className="period">{trebaType.period}</span>
                  </div>
                  
                  <div className="meta-info">
                    <small>–°–æ–∑–¥–∞–Ω–æ: {formatDate(trebaType.createdAt)}</small>
                  </div>
                </div>
                
                <div className="card-actions">
                  <button 
                    onClick={() => handleEdit(trebaType)}
                    className="btn-edit"
                  >
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </button>
                  <button 
                    onClick={() => handleDelete(trebaType.id, trebaType.name, trebaType.isActive)}
                    className="btn-delete"
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                  <button 
                    onClick={() => handleToggleActive(trebaType.id)}
                    className={`btn-toggle ${trebaType.isActive ? 'active' : 'inactive'}`}
                  >
                    {trebaType.isActive ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminTrebyTypesPage;
