import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Reading, ReadingType } from '../../types/calendar';

interface ReadingFormData {
  type: ReadingType;
  reference: string;
  title: string;
  text: string;
  order: number;
}

const AdminReadingsPage: React.FC = () => {
  const [readings, setReadings] = useState<Reading[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [editingReading, setEditingReading] = useState<Reading | null>(null);
  const [showForm, setShowForm] = useState(false);
  
  const [formData, setFormData] = useState<ReadingFormData>({
    type: ReadingType.APOSTLE,
    reference: '',
    title: '',
    text: '',
    order: 0
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —á—Ç–µ–Ω–∏–π
  const fetchReadings = async () => {
    setLoading(true);
    setError('');
    try {
      const response = await fetch('/api/calendar/admin/readings');
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á—Ç–µ–Ω–∏–π');
      const data = await response.json();
      setReadings(data);
    } catch (error: any) {
      setError(error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchReadings();
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ 
      ...prev, 
      [name]: name === 'order' ? parseInt(value) || 0 : value 
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    setLoading(true);

    try {
      const url = editingReading 
        ? `/api/calendar/readings/${editingReading.id}`
        : '/api/calendar/readings';
      
      const method = editingReading ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });

      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      
      setSuccess(editingReading ? '–ß—Ç–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!' : '–ß—Ç–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
      resetForm();
      fetchReadings();
    } catch (error: any) {
      setError(error.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setFormData({
      type: ReadingType.APOSTLE,
      reference: '',
      title: '',
      text: '',
      order: 0
    });
    setEditingReading(null);
    setShowForm(false);
  };

  const handleEdit = (reading: Reading) => {
    setFormData({
      type: reading.type,
      reference: reading.reference,
      title: reading.title || '',
      text: reading.text || '',
      order: reading.order
    });
    setEditingReading(reading);
    setShowForm(true);
  };

  const handleDelete = async (readingId: number) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —á—Ç–µ–Ω–∏–µ?')) return;
    
    setLoading(true);
    try {
      const response = await fetch(`/api/calendar/readings/${readingId}`, {
        method: 'DELETE'
      });
      
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
      
      setSuccess('–ß—Ç–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!');
      fetchReadings();
    } catch (error: any) {
      setError(error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  };

  const getReadingTypeLabel = (type: ReadingType) => {
    switch (type) {
      case ReadingType.APOSTLE: return 'üìú –ê–ø–æ—Å—Ç–æ–ª—å—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ';
      case ReadingType.GOSPEL: return '‚ú† –ï–≤–∞–Ω–≥–µ–ª–∏–µ';
      case ReadingType.OLD_TESTAMENT: return 'üìñ –í–µ—Ç—Ö–∏–π –ó–∞–≤–µ—Ç';
      case ReadingType.PROKEIMENON: return 'üéµ –ü—Ä–æ–∫–∏–º–µ–Ω';
      case ReadingType.ALLELUIA: return 'üéµ –ê–ª–ª–∏–ª—É–π—è';
      default: return type;
    }
  };

  const groupedReadings = readings.reduce((groups, reading) => {
    if (!groups[reading.type]) groups[reading.type] = [];
    groups[reading.type].push(reading);
    return groups;
  }, {} as Record<ReadingType, Reading[]>);

  return (
    <div className="system-page-container">
      <div className="system-page-content">
        <h1 className="system-page-title">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á—Ç–µ–Ω–∏—è–º–∏</h1>
        
        <div className="admin-calendar-nav">
          <Link to="/admin/calendar" className="system-btn-outline">‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é</Link>
          <button 
            className="system-btn-primary"
            onClick={() => setShowForm(!showForm)}
          >
            {showForm ? '–°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É' : '–î–æ–±–∞–≤–∏—Ç—å —á—Ç–µ–Ω–∏–µ'}
          </button>
        </div>

        {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        {showForm && (
          <div className="system-content-card">
            <h2>{editingReading ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—Ç–µ–Ω–∏–µ' : '–î–æ–±–∞–≤–∏—Ç—å —á—Ç–µ–Ω–∏–µ'}</h2>
            
            <form onSubmit={handleSubmit} className="system-form">
              <div className="system-form-row">
                <div className="system-form-group">
                  <label className="system-form-label">–¢–∏–ø —á—Ç–µ–Ω–∏—è *</label>
                  <select
                    name="type"
                    value={formData.type}
                    onChange={handleInputChange}
                    className="system-form-input"
                    required
                  >
                    <option value={ReadingType.APOSTLE}>–ê–ø–æ—Å—Ç–æ–ª—å—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ</option>
                    <option value={ReadingType.GOSPEL}>–ï–≤–∞–Ω–≥–µ–ª–∏–µ</option>
                    <option value={ReadingType.OLD_TESTAMENT}>–í–µ—Ç—Ö–∏–π –ó–∞–≤–µ—Ç</option>
                    <option value={ReadingType.PROKEIMENON}>–ü—Ä–æ–∫–∏–º–µ–Ω</option>
                    <option value={ReadingType.ALLELUIA}>–ê–ª–ª–∏–ª—É–π—è</option>
                  </select>
                </div>

                <div className="system-form-group">
                  <label className="system-form-label">–ü–æ—Ä—è–¥–æ–∫</label>
                  <input
                    type="number"
                    name="order"
                    value={formData.order}
                    onChange={handleInputChange}
                    className="system-form-input"
                    min="0"
                    placeholder="0"
                  />
                </div>
              </div>

              <div className="system-form-group">
                <label className="system-form-label">–°—Å—ã–ª–∫–∞ *</label>
                <input
                  type="text"
                  name="reference"
                  value={formData.reference}
                  onChange={handleInputChange}
                  className="system-form-input"
                  required
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú—Ñ. 5:1-12"
                />
              </div>

              <div className="system-form-group">
                <label className="system-form-label">–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
                <input
                  type="text"
                  name="title"
                  value={formData.title}
                  onChange={handleInputChange}
                  className="system-form-input"
                  placeholder="–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è"
                />
              </div>

              <div className="system-form-group">
                <label className="system-form-label">–¢–µ–∫—Å—Ç —á—Ç–µ–Ω–∏—è</label>
                <textarea
                  name="text"
                  value={formData.text}
                  onChange={handleInputChange}
                  className="system-form-input"
                  rows={6}
                  placeholder="–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —á—Ç–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                />
              </div>

              <div className="system-form-actions">
                <button 
                  type="submit" 
                  className="system-btn-primary"
                  disabled={loading}
                >
                  {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (editingReading ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å')}
                </button>
                <button 
                  type="button" 
                  className="system-btn-outline"
                  onClick={resetForm}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        )}

        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        {error && <div className="system-alert system-alert-error">{error}</div>}
        {success && <div className="system-alert system-alert-success">{success}</div>}

        {/* –°–ø–∏—Å–æ–∫ —á—Ç–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º */}
        <div className="system-content-card">
          <h2>–°–ø–∏—Å–æ–∫ —á—Ç–µ–Ω–∏–π ({readings.length})</h2>
          
          {loading ? (
            <div className="system-alert system-alert-info">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
          ) : readings.length === 0 ? (
            <div className="system-alert system-alert-warning">
              –ß—Ç–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —á—Ç–µ–Ω–∏–µ.
            </div>
          ) : (
            <div className="readings-groups">
              {Object.entries(groupedReadings).map(([type, typeReadings]) => (
                <div key={type} className="reading-type-group">
                  <h3 className="reading-type-title">
                    {getReadingTypeLabel(type as ReadingType)} ({typeReadings.length})
                  </h3>
                  
                  <div className="readings-list">
                    {typeReadings
                      .sort((a, b) => a.order - b.order)
                      .map(reading => (
                        <div key={reading.id} className="reading-card">
                          <div className="reading-info">
                            <div className="reading-reference">{reading.reference}</div>
                            {reading.title && (
                              <div className="reading-title">{reading.title}</div>
                            )}
                            {reading.text && (
                              <div className="reading-text">
                                {reading.text.substring(0, 150)}
                                {reading.text.length > 150 && '...'}
                              </div>
                            )}
                            <div className="reading-order">–ü–æ—Ä—è–¥–æ–∫: {reading.order}</div>
                          </div>
                          
                          <div className="reading-actions">
                            <button 
                              className="system-btn-outline system-btn-sm"
                              onClick={() => handleEdit(reading)}
                            >
                              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                            <button 
                              className="system-btn-outline system-btn-sm system-btn-danger"
                              onClick={() => handleDelete(reading.id)}
                            >
                              –£–¥–∞–ª–∏—Ç—å
                            </button>
                          </div>
                        </div>
                      ))}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default AdminReadingsPage;
